/*
** client.c -- a stream socket client demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <arpa/inet.h>

#define _STDC_FORMAT_MACROS
#include <inttypes.h>

//-------Modify parameters----
#define PACKETPERIOD_A 200000000
#define PACKETPERIOD_B 100000000
#define PACKETPERIOD_C 500000000

#define PACKETsize_A 90
#define PACKETsize_B 25
#define PACKETsize_C 75


//----------------------------

#define t
#define G
#ifdef G
#define PORT "6000" // the port in the fog that node will be connecting to
#define IPFOG "localhost" //ip of the fog
#endif
#define TEST
#define DEBUG

#define MAXDATASIZE 100 // max number of bytes we can get at once 
#define MAXPACKETSIZE 1500

#define MAXPUBLISHERPACKETSIZE 100

#define DEBUG

#ifdef DEBUG
#define DEBUG_PRINTF(x)			printf(x)
#define DEBUG_PRINTF2(x,y)		printf(x,y)
#define DEBUG_PRINTF3(x,y,z)	printf(x,y,z)
#endif

#ifndef DEBUG
#define DEBUG_PRINTF(x)
#define DEBUG_PRINTF(x,y)
#define DEBUG_PRINTF(x,y,z)
#endif

#define DEBUG_L2
#ifdef DEBUG_L2
#define L2DEBUG_PRINTF(x)			printf(x)
#define L2DEBUG_PRINTF2(x,y)		printf(x,y)
#define L2DEBUG_PRINTF3(x,y,z)	printf(x,y,z)
#endif
#ifndef DEBUG_L2
#define L2DEBUG_PRINTF(x)
#define L2DEBUG_PRINTF(x,y)
#define L2DEBUG_PRINTF(x,y,z)
#endif

// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
	if (sa->sa_family == AF_INET) {
		return &(((struct sockaddr_in*)sa)->sin_addr);
	}

	return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

uint64_t TimeElapsed(struct timeval* current, struct timeval* tv){
	uint64_t a;
	a = (current->tv_sec-tv->tv_sec)*1000000+(current->tv_usec-tv->tv_usec);
	return a;
}

double time_diff(struct timeval x , struct timeval y)
{
    double x_ms , y_ms , diff;

    x_ms = (double)x.tv_sec*1000000 + (double)x.tv_usec;
    y_ms = (double)y.tv_sec*1000000 + (double)y.tv_usec;

    diff = (double)y_ms - (double)x_ms;

    return diff;
}

struct PacketInfo {
	float rate; 			//packets per second
	int length; 		//packet length
	struct timeval tv; 	//structure to keep track of time to send
};

int PacketGeneration(int *sockfd,struct timeval *TimeA, struct timeval* TimeB, struct timeval*TimeC)
{
	struct timeval CurrentTime;
	char PacketBuffer[MAXPACKETSIZE];
	memset(PacketBuffer,5,MAXPACKETSIZE); //fill buffer with any data.

	//---Temporarily hardcoded, but it can be change to the input file or parameters
//	A.length=PACKETsize_A;
//	A.rate= 2;
//
//	B.length=PACKETsize_B;
//	B.rate= 1;
//
//	C.length=PACKETsize_C;
//	C.rate= 5;
	//------------------

	gettimeofday(&CurrentTime,NULL);
	if((TimeElapsed(&CurrentTime, TimeA))>PACKETPERIOD_A){
		memcpy(PacketBuffer,"A",1);
		memcpy(PacketBuffer+1,&CurrentTime,sizeof(CurrentTime));
		printf("time = %u.%06u\n",CurrentTime.tv_sec, CurrentTime.tv_usec);

		if (send(*sockfd,PacketBuffer, PACKETsize_A, 0) == -1)
			perror("send");
		DEBUG_PRINTF("MAIN: Packet A sent\n");
		*TimeA=CurrentTime;
	}
	if((TimeElapsed(&CurrentTime, TimeB))>PACKETPERIOD_B){
		memcpy(PacketBuffer,"B",1);
		memcpy(PacketBuffer+1,&CurrentTime,sizeof(CurrentTime));
		if (send(*sockfd,PacketBuffer, PACKETsize_B, 0) == -1)
			perror("send");
		DEBUG_PRINTF("MAIN: Packet B sent\n");
		*TimeB=CurrentTime;
	}
	if((TimeElapsed(&CurrentTime, TimeC))>PACKETPERIOD_C){
		memcpy(PacketBuffer,"C",1);
		memcpy(PacketBuffer+1,&CurrentTime,sizeof(CurrentTime));
		if (send(*sockfd,PacketBuffer, PACKETsize_C, 0) == -1)
			perror("send");
		DEBUG_PRINTF("MAIN: Packet C sent\n");
		*TimeC=CurrentTime;
	}

	return 0;
}

int main(int argc, char *argv[])
{
	//freopen("Output_Node.txt","w",stdout);
	DEBUG_PRINTF("Main: Start\n");
	int sockfd, numbytes;  
	char buf[MAXDATASIZE];
	struct addrinfo hints, *servinfo, *p;
	int rv;
	char s[INET6_ADDRSTRLEN];

	struct timeval tv, CurrentTime, RecvTime, TimeA, TimeB, TimeC;
	fd_set fds;
	tv.tv_sec=0;
	tv.tv_usec=0;
	CurrentTime.tv_sec=CurrentTime.tv_usec=0;
	RecvTime=CurrentTime;
	TimeA=CurrentTime;
	TimeB=CurrentTime;
	TimeC=CurrentTime;
	uint64_t elapsed=0;


	//Session init

	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;

	DEBUG_PRINTF("MAIN: getaddrinfo\n");
	if ((rv = getaddrinfo(IPFOG, PORT, &hints, &servinfo)) != 0) {
		fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
		return 1;
	}

	// loop through all the results and connect to the first we can
	DEBUG_PRINTF("Main:Socket and connect\n");
	for(p = servinfo; p != NULL; p = p->ai_next) {
		if ((sockfd = socket(p->ai_family, p->ai_socktype,
				p->ai_protocol)) == -1) {
			perror("client: socket");
			continue;
		}

		if (connect(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
			close(sockfd);
			perror("client: connect");
			continue;
		}

		break;
	}

	if (p == NULL) {
		fprintf(stderr, "client: failed to connect\n");
		return 2;
	}

	inet_ntop(p->ai_family, get_in_addr((struct sockaddr *)p->ai_addr),
			s, sizeof s);
	printf("NodeConnectionInit: connecting to Fog (ip) %s in port %s\n", s,PORT);

	freeaddrinfo(servinfo); // all done with this structure
	//------------

	while(1)
	{
		FD_ZERO(&fds);
		FD_SET(sockfd,&fds);
		select(sockfd+1,&fds,NULL,NULL,&tv);

		if (FD_ISSET(sockfd,&fds)){

			if((numbytes = recv(sockfd,buf, MAXDATASIZE-1,0))==-1){
				perror("recv");
				//exit(1);
				//TODO: exit again!! Where to put it
			}
			else if (numbytes==0){
				break;
			}
			else {
				buf[numbytes] = '\0';
				L2DEBUG_PRINTF3("MAIN: Received %d bytes: '%s'\n",numbytes,buf);
				memcpy(&RecvTime,buf+1,sizeof(RecvTime));
				DEBUG_PRINTF3("Main: RecvTime = %u.%06u\n",RecvTime.tv_sec, RecvTime.tv_usec);
				gettimeofday(&CurrentTime,NULL);
				DEBUG_PRINTF3("Main: CurrentTime = %u.%06u\n",CurrentTime.tv_sec, CurrentTime.tv_usec);
				elapsed=TimeElapsed(&CurrentTime, &RecvTime);
				printf("Main: Elapsed : %" PRIu64 "\n", elapsed);
			}

		}

		//TODO: Do the multiple packet send with the header.
		PacketGeneration(sockfd, &TimeA, &TimeB, &TimeC);
	}
	close(sockfd);

	return 0;
}

