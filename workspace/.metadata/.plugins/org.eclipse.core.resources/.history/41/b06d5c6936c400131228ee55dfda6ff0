/*
 * common.h
 *
 *  Created on: Apr 7, 2014
 *      Author: andrea
 */

#ifndef COMMON_H_
#define COMMON_H_


#endif /* COMMON_H_ */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <vector>
#include <algorithm>

#define FOGPORT "3490"  // the port users will be connecting
#define BACKLOG 10	 // how many pending connections queue will hold

#define MAXDATASIZE 100

#define FOG //Either fog, node or cloud
#ifdef FOG
#define DEVICELOGIC(socket) FOG_logic(socket)
#endif
#ifdef NODE
#define DEVICELOGIC(socket) NODE_logic(socket)
#endif
#ifdef CLOUD
#define DEVICELOGIC(socket) CLOUD_logic(socket)
#endif

#define DONOTHING	0
#define SEND2CLOUD 	1
#define SEND2FOG	2
#define SEND2NODE	3



#define DEBUG

#ifdef DEBUG
#define DEBUG_PRINTF(x)			printf(x)
#define DEBUG_PRINTF2(x,y)		printf(x,y)
#define DEBUG_PRINTF3(x,y,z)	printf(x,y,z)
#define DEBUG_PRINTF4(w,x,y,z)	printf(w,x,y,z)

#endif

#ifndef DEBUG
#define DEBUG_PRINTF(x)
#define DEBUG_PRINTF2(x,y)
#define DEBUG_PRINTF3(x,y,z)
#define DEBUG_PRINTF4(w,x,y,z)

#endif

#define CLOUDIP "localhost"
#define CLOUDPORT "6000"


 void sigchld_handler(int s)
{
	while(waitpid(-1, NULL, WNOHANG) > 0);
}

 void *get_in_addr(struct sockaddr *sa)
{
	if (sa->sa_family == AF_INET) {
		return &(((struct sockaddr_in*)sa)->sin_addr);
	}

	return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

 int CaseA(int* socket, char buf[], int *numbytes)
{
	DEBUG_PRINTF4("Case A: Socket %d received %d bytes: '%s'\n",*socket,*numbytes,buf);

	return 0;

}

 int CaseB(int* socket, char buf[], int *numbytes)
{
	 DEBUG_PRINTF4("Case A: Socket %d received %d bytes: '%s'\n",*socket,*numbytes,buf);

	return 0;

}

 int CaseC(int* socket, char buf[], int *numbytes)
{
	 DEBUG_PRINTF4("Case A: Socket %d received %d bytes: '%s'\n",*socket,*numbytes,buf);

	 return 0;

}

 int PublisherPacketAction(char buf[]){


	 return 0;
 }

 int SubscriberPacketAction(char buf[]){


	 return 0;
 }
