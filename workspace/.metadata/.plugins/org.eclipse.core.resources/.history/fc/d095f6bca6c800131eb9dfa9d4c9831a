/*
** server.c -- a stream socket server demo
*/

//#include <stdio.h>
//#include <stdlib.h>
//#include <unistd.h>
//#include <errno.h>
//#include <string.h>
//#include <sys/types.h>
//#include <sys/socket.h>
//#include <netinet/in.h>
//#include <netdb.h>
//#include <arpa/inet.h>
//#include <sys/wait.h>
//#include <signal.h>
//#define PORT "3490"  // the port users will be connecting
//#define BACKLOG 10	 // how many pending connections queue will hold
//
//#define MAXDATASIZE 100
//
//#define CLOUD //Either fog, node or cloud
//#ifdef FOG
//#define DEVICELOGIC(socket) FOG_logic(socket)
//#endif
//#ifdef NODE
//#define DEVICELOGIC(socket) NODE_logic(socket)
//#endif
//#ifdef CLOUD
//#define DEVICELOGIC(socket) CLOUD_logic(socket)
//#endif
//
//#define DONOTHING	0
//#define SEND2CLOUD 	1
//#define SEND2FOG	2
//#define SEND2NODE	3

#include "common.h"

using namespace std;

//
//int FOG_logic()
//{
//	return 0;
//}
//
//int NODE_logic()
//{
//	return 0;
//}
//
//int CLOUD_logic(int sockfd)
//{
//	int numbytes;
//	char buffer[MAXDATASIZE];
//	if ((numbytes = recv(sockfd, buffer, MAXDATASIZE-1, 0)) == -1) {
//		    perror("CLOUD_logic: recv");
//		    exit(1);
//	}
//
//	switch (buffer[0]) {
//	case SEND2FOG:
//
//		break;
//	default:
//		break;
//	}
//
//	return 0;
//}

//void select_system(int fd)
//{
//	struct timeval tv;
//	fd_set fds;
//	tv.tv_sec=tv.tv_usec=0;
//
//	FD_ZERO(&fds);
//	FD_SET(fd,&fds);
//	while(1) {
//		select(fd+1,&fds,NULL,NULL,&tv);
//
//		if (FD_ISSET(fd,&fds)){
//
//
//			if (DEVICELOGIC(fd)!=0){
//				printf("Select_system: DEVICELOGIC");
//			}
//		}
//
//
//	}
//
//	return ;
//
//}

 //get sockaddr, IPv4 or IPv6:
//void *get_in_addr(struct sockaddr *sa)
//{
//	if (sa->sa_family == AF_INET) {
//		return &(((struct sockaddr_in*)sa)->sin_addr);
//	}
//
//	return &(((struct sockaddr_in6*)sa)->sin6_addr);
//}

int main1(void)
{
	int sockfd, new_fd;  // listen on sock_fd, new connection on new_fd
	struct addrinfo hints, *servinfo, *p;
	struct sockaddr_storage their_addr; // connector's address information
	socklen_t sin_size;
	struct sigaction sa;
	int yes=1;
	char s[INET6_ADDRSTRLEN];
	int rv;

	vector<int> fd_list;
	fd_list.clear();



	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_flags = AI_PASSIVE; // use my IP

	if ((rv = getaddrinfo(NULL, PORT, &hints, &servinfo)) != 0) {
		fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
		return 1;
	}

	// loop through all the results and bind to the first we can
	for(p = servinfo; p != NULL; p = p->ai_next) {
		if ((sockfd = socket(p->ai_family, p->ai_socktype,
				p->ai_protocol)) == -1) {
			perror("server: socket");
			continue;
		}

		if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

		if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
			close(sockfd);
			close(sockfd);
			perror("server: bind");
			continue;
		}

		break;
	}

	if (p == NULL)  {
		fprintf(stderr, "server: failed to bind\n");
		return 2;
	}

	freeaddrinfo(servinfo); // all done with this structure

	if (listen(sockfd, BACKLOG) == -1) {
		perror("listen");
		exit(1);
	}

	sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

	printf("server: waiting for connections...\n");

	struct timeval tv;
	fd_set fds, fds_back;
	tv.tv_sec=tv.tv_usec=0;

	FD_ZERO(&fds);
	FD_ZERO(&fds_back);
	FD_SET(sockfd,&fds_back);
	fds=fds_back;
	fd_list.push_back(sockfd);

	sin_size = sizeof their_addr;
	int numbytes,i;
	char buf[MAXDATASIZE];

	int max_fd;
	DEBUG_PRINTF2("fd_list.back()= %d\n",fd_list.back());

	max_fd=*max_element(fd_list.begin(),fd_list.end());
	DEBUG_PRINTF2("Max_fd= %d\n",max_fd);

	while(1) {  // main accept() loop

		FD_ZERO(&fds);
		fds=fds_back;

		max_fd=*max_element(fd_list.begin(),fd_list.end());

		select(max_fd+1,&fds,NULL,NULL,&tv);

		if (FD_ISSET(sockfd,&fds)){

			DEBUG_PRINTF("Inside if\n");

			new_fd = (accept(sockfd, (struct sockaddr *)&their_addr, &sin_size));

			if (new_fd == -1) {
				perror("accept");
				//TODO: Check which are the consequences of having this continue here
				continue;
			}

			FD_SET(new_fd,&fds_back);
			fd_list.push_back(new_fd);

			inet_ntop(their_addr.ss_family,	get_in_addr((struct sockaddr *)&their_addr),s, sizeof s);
			printf("server: got connection from %s\n", s);

			for (i=0;i<fd_list.size();i++){
				DEBUG_PRINTF3("Socket %d: %d\n",i,fd_list[i]);
			}
		}

		for (i=1; i<fd_list.size();i++)
		{
			if (FD_ISSET(fd_list[i],&fds)){

				if ((numbytes = recv(new_fd, buf, MAXDATASIZE-1, 0)) == -1) {
					    perror("recv");
					    //exit(1);
					    //TODO: Remove this exits because it's causing that the server disconnects
					}
				if (numbytes==0){
					FD_CLR(fd_list[i],&fds_back);
					close(fd_list[i]);
					fd_list.erase(fd_list.begin()+i);
				}
				else {
					buf[numbytes] = '\0';
					printf("server: received %d bytes: '%s'\n",numbytes,buf);
				}

			}
		}


//		pid_t pid;
//		int numbytes;
//		char buf[MAXDATASIZE];
////
//		pid=fork();
//
//		if (pid==0) // this is the child process
//		{
//			close(sockfd); // child doesn't need the listener
//			while(1){
//			if ((numbytes = recv(new_fd, buf, MAXDATASIZE-1, 0)) == -1) {
//				    perror("recv");
//				    exit(1);
//				}
//
//				buf[numbytes] = '\0';
//
//				printf("server: received %d bytes: '%s'\n",numbytes,buf);
//
////TODO: Check why it's sending hello world twice
//			if (send(new_fd, "Hello, world!", 13, 0) == -1)
//				perror("send");
//			}
//			close(new_fd);
//			exit(0);
//		}
//		else if (pid>0) //this is the parent process
//		{
//
//		}
//		else //Error
//		{
//			printf("Error");
//		}
//		//I think this should go in the parent process:
//					close(new_fd);  // parent doesn't need this
//	//	}

	}
//
	return 0;
}


